#!/bin/sh

# Don't use anything beyond these commands:
#
#    awk cat cmp cp diff echo egrep expr false grep ln ls mkdir mv
#    printf pwd rm rmdir sed sort stat tar tee test touch tr true
#    chgrp chmod chown uname
#
# And use the first available program that can download files from
# this list:
#
#    curl wget openssl nc sftp ftp telnet lynx links elinks w3m
#

echo ""
echo " _ |  _  _ _  _  _"
echo "|_)|<(_|| | |(_|| "
echo "|     _|      _|  "
echo ""
echo "Installing: pkgmgr"

VERSION="0.0.1"
echo "Version: ${VERSION}"
echo "Working directory: ${PWD}"

if [ -t 0 ]; then
    INTERACTIVE=yes
else
    INTERACTIVE=no
fi
echo "Interactive? ${INTERACTIVE}"

# net install, release, or development?
if [ "$INTERACTIVE" = "no" ]; then
    INST_TYPE=netinst
    NETINST=1
else
    if [ -d .git ]; then
        INST_TYPE=dev
        DEV=1
    elif [ -f version ]; then
        INST_TYPE=release
        RELEASE=1
    fi
fi
echo "Install type: ${INST_TYPE}"

OS="$(uname -s)"
REL="$(uname -r)"
ARCH="$(uname -m)"

noop(){ true ; }

# NOTE: The case statement that follows is an aspirational list of
# supported operating systems. While in the early stage of development
# pkgmgr will support Darwin, later other *BSDs will be supported,
# then Linux, and then others OSs.

# build a LLVM-like target triple
# see https://clang.llvm.org/docs/CrossCompilation.html#target-triple
case "$OS" in
    AIX) OS_AIX=1; noop $OS_AIX ;;
    Darwin)
        OS_DARWIN=1; noop $OS_DARWIN
        OS=$(echo "$OS" | tr '[:upper:]' '[:lower:]')
        REL=${REL%%.*}
        VENDOR="apple-"
        SYNTHCONF="/etc/synthetic.conf"
        APFSUTIL="/System/Library/Filesystems/apfs.fs/Contents/Resources/apfs.util"
        PKGMGRDIR="pm"
        PKGMGRROOT="/${PKGMGRDIR}"
        ;;
    DragonFly) OS_DRAGONFLY=1; noop $OS_DRAGONFLY ;;
    FreeBSD) OS_FREEBSD=1; noop $OS_FREEBSD ;;
    GNU) OS_GNU=1; noop $OS_GNU ;;
    HP-UX) OS_HPUX=1; noop $OS_HPUX ;;
    Haiku) OS_HAIKU=1; noop $OS_HAIKU ;;
    Linux) OS_LINUX=1; noop $OS_LINUX ;;
    NetBSD) OS_NETBSD=1; noop $OS_NETBSD ;;
    OpenBSD) OS_OPENBSD=1; noop $OS_OPENBSD ;;
    SunOS) OS_SUNOS=1; noop $OS_SUNOS ;;
    *)
        echo "${OS} not supported"
        exit 1
esac
MACHTRIPLE="${ARCH}-${VENDOR}${OS}${REL}"
echo "Machine: ${MACHTRIPLE}"

if [ "$OS_DARWIN" ]; then
    if [ "$REL" -ge "19" ]; then
        # Catalina and beyond have a read-only system volume
        # https://support.apple.com/en-ca/HT210650

        # We use the synthetic symbolic link system to create a
        # synthetic entry for the package manager root on the system
        # volume at /.
        # see 'man synthetic.conf'

        echo "Creating pkgmgr root at ${PKGMGRROOT}"
        if [ -f "$SYNTHCONF" ]; then
            echo "Checking for existing synthetic link in ${SYNTHCONF}"
            if grep -q "^${PKGMGRDIR}\t" "${SYNTHCONF}"; then
                echo "Entry for '${PKGMGRDIR}' already exists"
                unset NEEDS_LINK
            else
                NEEDS_LINK=1
            fi
        else
            echo "Creating: ${SYNTHCONF}"
            sudo touch "${SYNTHCONF}"
            NEEDS_LINK=1
        fi

        echo "Ensure ${SYNTHCONF} has correct owner, group, and perms"
        if [ "$(stat -f '%Su:%Sg:%Lp' ${SYNTHCONF})" != "root:wheel:644" ]; then
            sudo chown root:wheel "${SYNTHCONF}"
            sudo chmod 644 "${SYNTHCONF}"
        fi

        if [ "$NEEDS_LINK" ]; then
            echo "Appending entry for '${PKGMGRDIR}:"
            cat <<EOF | sudo tee -a "${SYNTHCONF}"
${PKGMGRDIR}	System/Volumes/Data/${PKGMGRDIR}
EOF
            # update root fs links without reboot
            "${APFSUTIL}" -B
        fi
    else
        echo "macOS versions before Catalina are not supported at this time"
        exit 1
    fi
else
    echo "${OS} not supported at this time, but is forthcoming."
    exit 1
fi

CLANG_PKG="clang-${MACHTRIPLE}.tar.gz"
GMAKE_PKG="gmake-${MACHTRIPLE}.tar.gz"

download() {
    true
}

if [ $NETINST ]; then
    DIST_HOST="http://localhost:8000"
    DIST_PREFIX="dist/bins"
    DIST_BASE_URL="${DIST_HOST}/${DIST_PREFIX}"
    echo "Distribution base: ${DIST_BASE_URL}"

    CLANG_URL="${DIST_BASE_URL}/${CLANG_PKG}"
    GMAKE_URL="${DIST_BASE_URL}/${GMAKE_PKG}"
    echo "Fetching: ${CLANG_PKG}"
    download "${CLANG_URL}"
    echo "Fetching: ${GMAKE_PKG}"
    download "${GMAKE_URL}"
elif [ $DEV ]; then
    true
elif [ $RELEASE ]; then
    true
else
    echo "Error: unsupported install type: ${INST_TYPE}"
    exit 1
fi
